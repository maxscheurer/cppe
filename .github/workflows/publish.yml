name: Publish package

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
  release:
    types:
      - published

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 3

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # such that setuptools_scm can do its job correctly

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  generate-wheels-matrix:
    name: Generate wheels matrix
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v4
      - name: Install cibuildwheel
        run: pipx install cibuildwheel==2.19.2
      - id: set-matrix
        run: |
          MATRIX=$(
            {
              cibuildwheel --print-build-identifiers --platform linux \
              | jq -nRc '{"only": inputs, "os": "ubuntu-latest"}' \
              && cibuildwheel --print-build-identifiers --platform macos \
              | jq -nRc '{"only": inputs, "os": "macos-latest"}' \
              && cibuildwheel --print-build-identifiers --platform windows \
              | jq -nRc '{"only": inputs, "os": "windows-latest"}'
            } | jq -sc
          )
          echo "Full build matrix"
          echo "$MATRIX"
          echo "include=$MATRIX" >> $GITHUB_OUTPUT          
    env:
      CIBW_ARCHS_LINUX: x86_64 # aarch64  # skipping as h5py stopped providing pre-build wheels for aarch64 on PyPI
      CIBW_ARCHS_MACOS: x86_64 arm64
      CIBW_ARCHS_WINDOWS: AMD64
      # skip musl builds
      CIBW_SKIP: "*-musllinux_*"
      # disable free-threaded support
      CIBW_FREE_THREADED_SUPPORT: False
      # exclude latest Python beta
      CIBW_PRERELEASE_PYTHONS: False

  build_wheels:
    name: Build ${{ matrix.only }}
    needs: generate-wheels-matrix
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-wheels-matrix.outputs.include) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # such that setuptools_scm can do its job correctly

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # this will set the system compiler
      - name: Set Windows env
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - uses: pypa/cibuildwheel@v2.19.2
        env:
          # skip testing PyPy builds
          CIBW_TEST_SKIP: "pp*"

          CIBW_ENVIRONMENT_LINUX: >
            SKBUILD_CMAKE_ARGS="-DENABLE_ARCH_FLAGS=OFF;-DENABLE_OPENMP=OFF"

          CIBW_ENVIRONMENT_MACOS: >
            SKBUILD_CMAKE_ARGS="-DENABLE_ARCH_FLAGS=OFF;-DENABLE_OPENMP=OFF"

          CIBW_ENVIRONMENT_WINDOWS: >
            SKBUILD_CMAKE_ARGS="-GNinja;-DCMAKE_CXX_COMPILER=clang-cl;-DENABLE_ARCH_FLAGS=OFF;-DENABLE_OPENMP=OFF"
        with:
          only: ${{ matrix.only }}

      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  upload_all:
    name: Upload if release
    needs:
      - build_wheels
      - build_sdist
    environment: pypi
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@v1
        with:
          repository-url: https://test.pypi.org/legacy/
